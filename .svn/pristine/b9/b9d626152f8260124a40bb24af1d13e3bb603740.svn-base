package com.enayapbm.business;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import javax.enterprise.context.RequestScoped;
import javax.enterprise.inject.Produces;
import javax.inject.Inject;

import com.enayapbm.medimpact.model.DrugList;
import com.enayapbm.medimpact.model.MedImpactRequest;

@RequestScoped
public class PbmDataOperations {

	private InputStream input;
	private String fileName;
	private FileType uploadedFileType;
	List<EnayaPbmData> enayaPbmdataList;
	private List<PbmDataFeedbackMessage> feedbackList;

	@Inject
	@Chosen
	private com.enayapbm.business.FileReader<EnayaPbmData> reader;

	private final String uploadFailed = "PBMDataUploadFailed";

	public enum FileType {
		CSV, XLS, XLSX
	}

	public List<PbmDataFeedbackMessage> handleMultipleFileUpload(String directoryPath) throws FileNotFoundException {
		File pbmDataDirectory = new File(directoryPath);
		System.out.println(pbmDataDirectory.getAbsolutePath());
		File[] fileList = pbmDataDirectory.listFiles();
		feedbackList = new ArrayList<PbmDataFeedbackMessage>();
		if (fileList.length == 0) {
			return null;
		}
		for (File file : fileList) {
			input = new FileInputStream(file);
			fileName = file.getName();
			try {
				if (enayaPbmdataList != null) {
					enayaPbmdataList = null;
				}
				enayaPbmdataList = processFile(fileName, input);
				// String returnedCode = processUpload(enayaPbmdataList, payerId);
				/*
				 * if (returnedCode != null) { feedbackList.add(new
				 * PbmDataFeedbackMessage(file.getName(), Messages.NO_ASSOCIATION_FOUND));
				 * continue; }
				 */
				List<MedImpactRequest> medImpactList = processEnayaPBMRequest(enayaPbmdataList);

				feedbackList.add(new PbmDataFeedbackMessage(file.getName(), Messages.PRICELIST_UPLOAD_SUCCESS));
				file.delete();
			} catch (Exception e) {
				e.printStackTrace();
				feedbackList.add(new PbmDataFeedbackMessage(file.getName(), Messages.PRICELIST_UPLOAD_FAILED));
			}
		}

		return feedbackList;
	}

	public List<MedImpactRequest> processEnayaPBMRequest(List<EnayaPbmData> enayaPbmDataList) {
		List<MedImpactRequest> midImpactRequestList = new ArrayList<MedImpactRequest>();

		for (int i = 0; i < enayaPbmDataList.size(); i++) {
			MedImpactRequest medImpactReq = new MedImpactRequest();
			for (int j = i + 1; j < enayaPbmDataList.size(); j++) {
				EnayaPbmData enayaPbmData = enayaPbmDataList.get(i);
				//EnayaPbmData enayaPbmData2 = enayaPbmDataList.get(j);
				
				/*
				 * tempRequestId = enayaPbmData.getRequestId(); if(tempRequestId == null ||
				 * !(tempRequestId.equals(enayaPbmData.getRequestId())))
				 */
				if (!enayaPbmData.getRequestId().equals(enayaPbmData2.getRequestId())) {
					medImpactReq.setRequestId(enayaPbmData.getRequestId());
					medImpactReq.setPayerId(enayaPbmData.getPayerId());
					medImpactReq.setPrescriberId(enayaPbmData.getPrescriberId());
					medImpactReq.setMemberId(enayaPbmData.getMemberId());
					medImpactReq.setMemberGender(enayaPbmData.getGender().name());
					medImpactReq.setMemberWeight(null);
					medImpactReq.setPharmacyId(enayaPbmData.getProviderId());
					medImpactReq.setDateOfService(enayaPbmData.getDateOfService().toString());
					medImpactReq.setDateOfBirth(enayaPbmData.getDateOfBirth().toString());
					
					DrugList drug = new DrugList();
					
					medImpactReq.getIcdCodes().add(enayaPbmData.getDiagnosisCode());
					drug.setNdcDrugCode(enayaPbmData.getSfdaCode());
					drug.setAmount(enayaPbmData.getAmount().toString());
					drug.setDispensedQuantity(enayaPbmData.getDispensedQuantity());
					drug.setDaysOfSupply(enayaPbmData.getDaysOfSupply());
					medImpactReq.getDrugList().add(drug);

				} else if (enayaPbmData.getRequestId().equals(enayaPbmData2.getRequestId())) {
					DrugList drug = new DrugList();
					
					medImpactReq.getIcdCodes().add(enayaPbmData2.getDiagnosisCode());
					drug.setNdcDrugCode(enayaPbmData2.getSfdaCode());
					drug.setAmount(enayaPbmData2.getAmount().toString());
					drug.setDispensedQuantity(enayaPbmData2.getDispensedQuantity());
					drug.setDaysOfSupply(enayaPbmData2.getDaysOfSupply());
					medImpactReq.getDrugList().add(drug);

				}
				

			}

			midImpactRequestList.add(medImpactReq);
		}

	return midImpactRequestList;

	}

	/*
	 * private String processUpload(List<EnayaPbmData> enayaPbmData, BigDecimal
	 * payerId) { // get all associated provider then upload
	 * 
	 * String associationCode = pricelist.get(1).getAssociationCode();
	 * associationCode = associationCode.replaceAll("'", ""); List<SwitchAccount>
	 * providerList =
	 * accountToAccountAssociationFacade.findAssociatedProviders(payerId,
	 * associationCode); if (providerList == null || providerList.size() == 0){
	 * return Messages.NO_ASSOCIATION_FOUND; }
	 * 
	 * 
	 * List<String> providersId = new ArrayList<String>(); for (SwitchAccount
	 * provider : providerList) { if (provider.getSwitchAccountId() != null) {
	 * providersId.add(provider.getSwitchAccountId().toString()); } }
	 * upload(pricelist, providersId, payerId); return null; }
	 */

	/*
	 * private void upload(List<EnayaPbmData> pricelist2, List<String> providersId,
	 * BigDecimal payerId) { // TODO Auto-generated method stub try { for (String
	 * providerId : providersId) { userTransaction.begin(); PriceList
	 * pricelistEntity = createPricelistEntity(providerId, payerId.toString());
	 * priceListFacade.save(pricelistEntity); for (PriceListData aPD : pricelist2) {
	 * PriceListService aService =
	 * createPricelistSeviceEntity(pricelistEntity.getId().getPriceListId(), aPD);
	 * priceListServiceFacade.save(aService); } serviceConfig.setId(new
	 * ServiceConfigId(new BigDecimal(providerId), new BigDecimal("201")));
	 * serviceConfig.setPriceListId(pricelistEntity.getId().getPriceListId());
	 * accountToAccountServiceConfigFacade.update(serviceConfig);
	 * userTransaction.commit(); } // return
	 * pricelistEntity.getId().getPriceListId(); } catch (Exception E) { try {
	 * userTransaction.rollback(); } catch (IllegalStateException |
	 * SecurityException | SystemException e) { e.printStackTrace(); } throw new
	 * Violation().add(MessageTemplate.Empty, uploadFailed); } }
	 */

	/*
	 * private PriceListService createPricelistSeviceEntity(BigDecimal priceListId,
	 * PriceListData pricelist) { if (null == pricelist) { return null; }
	 * PriceListService service = new PriceListService();
	 * 
	 * PriceListServiceId id = new PriceListServiceId();
	 * id.setPriceListId(priceListId); id.setCode(pricelist.getCode());
	 * service.setId(id);
	 * 
	 * service.setDescription(pricelist.getDescription());
	 * service.setPrice(Double.parseDouble(pricelist.getPrice())); return service; }
	 */

	/*
	 * private PriceList createPricelistEntity(String source, String destination) {
	 * PriceList pricelistEntry = new PriceList();
	 * pricelistEntry.setDateUploaded(new Timestamp(System.currentTimeMillis()));
	 * pricelistEntry.setSwitchAccount(switchAccountFacadeInJPA.findAccountById(
	 * source)); pricelistEntry.setName(source + "-" + destination); //
	 * pricelistEntry.setSwitchUserId("sumayah");
	 * 
	 * PriceListId id = new PriceListId(); BigDecimal nextPricelistId = new
	 * BigDecimal(sequencesFacadeInJPA.makePricelistSequence()); id.setAccountId(new
	 * BigDecimal(source)); id.setPriceListId(nextPricelistId);
	 * pricelistEntry.setId(id);
	 * 
	 * return pricelistEntry; }
	 */

	/*
	 * public void clean() { for (EnayaPbmData service : enayaPbmdataList) { if
	 * ((service.getCode() == null || service.getCode().isEmpty()) &&
	 * (service.getDescription() == null || service.getDescription().isEmpty()) &&
	 * (service.getPrice() == null || service.getPrice().isEmpty()))
	 * pricelist.remove(service); else { if (service.getDescription() != null)
	 * service.setDescription(removeInvalidCharacters(service.getDescription())); if
	 * (service.getPrice() != null)
	 * service.setPrice(removeCommas(service.getPrice())); } } }
	 * 
	 * private String removeInvalidCharacters(String description) { return
	 * description.replaceAll("&", "and").replaceAll("'", ""); }
	 * 
	 * private String removeCommas(String price) { return price.replaceAll(",", "");
	 * }
	 */

	public List<EnayaPbmData> processFile(String fileName, InputStream in) {
		try {
			this.uploadedFileType = getFileType(fileName);
			enayaPbmdataList = reader.readFile(in);
			// clean();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return enayaPbmdataList;
	}

	@Produces
	@Chosen
	@RequestScoped
	public com.enayapbm.business.FileReader<EnayaPbmData> chooseFileReader(
			@FileReaderQualifier(FileType.XLS) XLSPbmReader xlsReader,
			@FileReaderQualifier(FileType.XLSX) XLSXPbmReader xlsxReader) throws Exception {
		switch (uploadedFileType) {
		/*
		 * case CSV: return csvReader;
		 */
		case XLS:
			return xlsReader;
		case XLSX:
			return xlsxReader;
		default:
			throw new Exception("FileType not supported!");
		}
	}

	private FileType getFileType(String fileName) throws Exception {
		/*
		 * if (fileName.toUpperCase().endsWith("CSV")) { return FileType.CSV; } else
		 */ if (fileName.toUpperCase().endsWith("XLS")) {
			return FileType.XLS;
		} else if (fileName.toUpperCase().endsWith("XLSX")) {
			return FileType.XLSX;
		} else
			throw new Exception("FileType not supported!");
	}
}
