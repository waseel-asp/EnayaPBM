package com.enayapbm.business;

import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.enterprise.context.RequestScoped;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.enayapbm.business.EnayaPbmData.Gender;
import com.enayapbm.business.PbmDataOperations.FileType;
import com.enayapbm.business.Violation.MessageTemplate;

@FileReaderQualifier(FileType.XLSX)
@RequestScoped
public class XLSXPbmReader implements FileReader<EnayaPbmData> {
	EnayaPbmData enayaPbmData;
	List<EnayaPbmData> enayaPbmDataList;

	@Override
	public List<EnayaPbmData> readFile(InputStream in) throws IOException, ParseException {
		 enayaPbmDataList = new ArrayList<EnayaPbmData>();

		XSSFWorkbook wb = new XSSFWorkbook(in);
		XSSFSheet sheet = wb.getSheetAt(0);
		XSSFRow row;

		Iterator<Row> rows = sheet.rowIterator();
		row = (XSSFRow) rows.next();
		if (row.getCell(3) == null || row.getCell(3).toString().isEmpty()) {
			wb.close();
			throw new Violation().add(MessageTemplate.Error, Messages.MISSING_COLUMNS);
		} else if(row.getRowNum() != 0){
			enayaPbmDataList.add(extractRowData(row));
		}
		while (rows.hasNext()) {
			row = (XSSFRow) rows.next();
			enayaPbmDataList.add(extractRowData(row));
		}
		wb.close();

		//enayaPbmDataList.remove(0);
		return enayaPbmDataList;
	}

	private EnayaPbmData extractRowData(XSSFRow row) throws IOException, ParseException {
		if (row.getLastCellNum() < 19) {
			if(enayaPbmDataList.size() > 0 ) {
				if(row.getCell(0).toString().equals(anObject))
					enayaPbmData = new EnayaPbmData();
			}else {
				enayaPbmData = new EnayaPbmData();
			
			enayaPbmData.setRequestId(row.getCell(0).toString());
			enayaPbmData.setPayerId(row.getCell(1).toString());
			enayaPbmData.setPrescriberId(row.getCell(2).toString());
			enayaPbmData.setPolicyNo(row.getCell(3).toString());
			enayaPbmData.setMemberNo(row.getCell(4).toString());
			enayaPbmData.setMemberId(row.getCell(5).toString());
			enayaPbmData.setGender(Gender.valueOf(row.getCell(6).toString()));
			enayaPbmData.setProviderId(row.getCell(7).toString());
			enayaPbmData.setProviderName(row.getCell(8).toString());
			enayaPbmData.setApprovalReceivedDate(row.getCell(9).getDateCellValue());
			enayaPbmData.setDateOfService(row.getCell(10).getDateCellValue());
			enayaPbmData.setDateOfBirth(row.getCell(11).getDateCellValue());
			
			/*enayaPbmData.setDateOfService(new SimpleDateFormat("dd/MM/yyyy").parse(row.getCell(10).toString()));
			enayaPbmData.setDateOfBirth(new SimpleDateFormat("dd/MM/yyyy").parse(row.getCell(11).toString()));*/
			enayaPbmData.setDiagnosisCode(row.getCell(12).toString());
			enayaPbmData.setDiagnosisDesc(row.getCell(13).toString());
			enayaPbmData.setSfdaCode(row.getCell(14).toString());
			enayaPbmData.setDispensedQuantity(new Integer((int) row.getCell(15).getNumericCellValue()));
			enayaPbmData.setAmount((Double.valueOf(row.getCell(16).getNumericCellValue())));
			enayaPbmData.setDaysOfSupply(row.getCell(17).toString());
			return enayaPbmData;
			}
		} else {
			throw new IOException("Importing Excel Error");
			// throw new IOException(messages.getValueFromKey("ImportExcelError"));
		}

		/*
		 * if (!(pricelist.getCode().isEmpty() && pricelist.getDescription().isEmpty()
		 * && pricelist.getPrice().isEmpty())) { return pricelist; } else { return null;
		 * }
		 */
	}

}
