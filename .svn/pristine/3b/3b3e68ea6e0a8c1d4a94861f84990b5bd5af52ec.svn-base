package com.enayapbm.persist;

import java.util.List;
import java.util.logging.Level;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 * Facade for entity PbmconfigPayerToProvider.
 * 
 * @see src.com.waseelswitch.waseel.persist.model.PbmconfigPayerToProvider
 * @author MyEclipse Persistence Tools
 */
@Stateless
public class PbmconfigPayerToProviderFacade {
	// property constants
	public static final String IS_ENABLED = "isEnabled";

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Perform an initial save of a previously unsaved PbmconfigPayerToProvider
	 * entity. All subsequent persist actions of this entity should use the
	 * #update() method.
	 * 
	 * @param entity
	 *            PbmconfigPayerToProvider entity to persist
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void save(PbmconfigPayerToProvider entity) {
		LogUtil.log("saving PbmconfigPayerToProvider instance", Level.INFO, null);
		try {
			entityManager.persist(entity);
			LogUtil.log("save successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("save failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Delete a persistent PbmconfigPayerToProvider entity.
	 * 
	 * @param entity
	 *            PbmconfigPayerToProvider entity to delete
	 * @throws RuntimeException
	 *             when the operation fails
	 */
	public void delete(PbmconfigPayerToProvider entity) {
		LogUtil.log("deleting PbmconfigPayerToProvider instance", Level.INFO, null);
		try {
			entity = entityManager.getReference(PbmconfigPayerToProvider.class, entity.getId());
			entityManager.remove(entity);
			LogUtil.log("delete successful", Level.INFO, null);
		} catch (RuntimeException re) {
			LogUtil.log("delete failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Persist a previously saved PbmconfigPayerToProvider entity and return it
	 * or a copy of it to the sender. A copy of the PbmconfigPayerToProvider
	 * entity parameter is returned when the JPA persistence mechanism has not
	 * previously been tracking the updated entity.
	 * 
	 * @param entity
	 *            PbmconfigPayerToProvider entity to update
	 * @return PbmconfigPayerToProvider the persisted PbmconfigPayerToProvider
	 *         entity instance, may not be the same
	 * @throws RuntimeException
	 *             if the operation fails
	 */
	public PbmconfigPayerToProvider update(PbmconfigPayerToProvider entity) {
		LogUtil.log("updating PbmconfigPayerToProvider instance", Level.INFO, null);
		try {
			PbmconfigPayerToProvider result = entityManager.merge(entity);
			LogUtil.log("update successful", Level.INFO, null);
			return result;
		} catch (RuntimeException re) {
			LogUtil.log("update failed", Level.SEVERE, re);
			throw re;
		}
	}

	public PbmconfigPayerToProvider findById(PbmconfigPayerToProviderId id) {
		LogUtil.log("finding PbmconfigPayerToProvider instance with id: " + id, Level.INFO, null);
		try {
			PbmconfigPayerToProvider instance = entityManager.find(PbmconfigPayerToProvider.class, id);
			return instance;
		} catch (RuntimeException re) {
			LogUtil.log("find failed", Level.SEVERE, re);
			throw re;
		}
	}

	/**
	 * Find all PbmconfigPayerToProvider entities with a specific property
	 * value.
	 * 
	 * @param propertyName
	 *            the name of the PbmconfigPayerToProvider property to query
	 * @param value
	 *            the property value to match
	 * @return List<PbmconfigPayerToProvider> found by query
	 */
	@SuppressWarnings("unchecked")
	public List<PbmconfigPayerToProvider> findByProperty(String propertyName, final Object value) {
		LogUtil.log("finding PbmconfigPayerToProvider instance with property: " + propertyName + ", value: " + value,
				Level.INFO, null);
		try {
			final String queryString = "select model from PbmconfigPayerToProvider model where model." + propertyName
					+ "= :propertyValue";
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find by property name failed", Level.SEVERE, re);
			throw re;
		}
	}

	public List<PbmconfigPayerToProvider> findByIsEnabled(Object isEnabled) {
		return findByProperty(IS_ENABLED, isEnabled);
	}

	/**
	 * Find all PbmconfigPayerToProvider entities.
	 * 
	 * @return List<PbmconfigPayerToProvider> all PbmconfigPayerToProvider
	 *         entities
	 */
	@SuppressWarnings("unchecked")
	public List<PbmconfigPayerToProvider> findAll() {
		LogUtil.log("finding all PbmconfigPayerToProvider instances", Level.INFO, null);
		try {
			final String queryString = "select model from PbmconfigPayerToProvider model";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			LogUtil.log("find all failed", Level.SEVERE, re);
			throw re;
		}
	}

}